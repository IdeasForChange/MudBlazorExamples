@using EnterpriseAppFluxor.Features.Dropdowns.Store
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using MudBlazor

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<DropdownState> DropdownState

<MudAutocomplete T="ComplexObject"
Label="Select"
Variant="Variant.Outlined"
Dense="true"
Margin="Margin.Dense"
@bind-Value="@_selectedItem"     
SearchFunc="@DataSearch"
ToStringFunc="@( c => c == null ? null : $"{c.Name}")"
ResetValueOnEmptyText="true" />


@code {
    public ComplexObject? SelectedItem => _selectedItem;
    private ComplexObject? _selectedItem { get; set; }


    protected override void OnInitialized()
    {
        SubscribeToAction<DropdownDataLoadedAction>(OnDropdownDataLoaded);
        SubscribeToAction<SetSelectedItemAction>(OnSetSelectedItem);

        if (!DropdownState.Value.Items.Any())
        {
            Dispatcher.Dispatch(new LoadDropdownDataAction());
        }
        base.OnInitialized();
    }

    // public void Reset()
    // {
    //     _selectedItem = null;
    //     StateHasChanged();
    // }

    // public void SetBatch(ComplexObject? _selectedItem)
    // {
    //     _selectedItem = _selectedItem == null ? DropdownState.Value.Items.First() : DropdownState.Value.Items.Single(x => x.Id == _selectedItem.Id);
    //     Dispatcher.Dispatch(new SetSelectedItemAction(_selectedItem));
    //     StateHasChanged();
    // }

    public void OnDropdownDataLoaded(DropdownDataLoadedAction item)
    {
        var data = item.Items;
        //SetBatch(DropdownState.Value.SelectedItem);
    }

    public void OnSetSelectedItem(SetSelectedItemAction item)
    {
        _selectedItem = item.SelectedItem;
    }

    private async Task<IEnumerable<ComplexObject>> DataSearch(string value, CancellationToken cancellationToken)
    {
        await Task.Yield();

        if (string.IsNullOrEmpty(value))
        {
            return DropdownState.Value.Items;
        }

        return DropdownState.Value.Items
            .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}